import sqlite3

from aiogram import Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from state.create import CreateState
from keyboards.create_kb import tables_kb
from keyboards.profile_kb import profile_kb


async def user_disc(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    user_id = message.from_user.id
    with sqlite3.connect('tgbot_db.db') as con:
        cursor = con.cursor()
        cursor.execute('SELECT discount, telegram_id FROM users WHERE telegram_id == ?', (user_id,))
        disc = cursor.fetchone()
        con.commit()
    await bot.send_message(message.from_user.id, f'–ù–∞ –¥–∞–Ω–∏–π —á–∞—Å –í–∞—à–∞ –∑–Ω–∏–∂–∫–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å - {int(disc[0])}% üìä',
                           reply_markup=profile_kb())


async def select_table(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    await bot.send_message(message.from_user.id, f'–©–æ –í–∏ –∑–∞–º–æ–≤–ª—è–ª–∏? ‚¨áÔ∏è', reply_markup=tables_kb())
    await state.set_state(CreateState.select_table)


async def select_order(call: CallbackQuery, state: FSMContext):
    await call.message.answer(f'–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚¨áÔ∏è')
    await state.update_data(select_table=call.data)
    await call.message.edit_reply_markup(reply_markup=None)
    await call.answer()
    await state.set_state(CreateState.order_info)


async def order_info(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    order = message.text

    async def process_order(table_name):
        with sqlite3.connect('orders_db.db') as con:
            cursor = con.cursor()
            cursor.execute(f'SELECT id, –í_—Ä–æ–±–æ—Ç—ñ, telegram_id FROM {table_name} WHERE id = ?', (order,))
            status = cursor.fetchone()
            con.commit()
        if status is not None:
            if int(status[2]) == user_id:
                if status[1] == 0:
                    await bot.send_message(message.from_user.id, 'üî¥ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—ñ üî¥',
                                           reply_markup=profile_kb())
                    await state.clear()
                elif status[1] == 1:
                    await bot.send_message(message.from_user.id, 'üü° –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ —Ä–æ–±–æ—Ç—ñ üü°', reply_markup=profile_kb())
                    await state.clear()
                elif status[1] == 2:
                    await bot.send_message(message.from_user.id, 'üü¢ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥–æ—Ç–æ–≤–µ üü¢', reply_markup=profile_kb())
                    await state.clear()
            else:
                await bot.send_message(message.from_user.id, f'‚ùå –¶–µ –Ω–µ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚ùå')

    tables = ['–ü–Ü–î–í–Ü–ö–û–ù–ù–Ø', '–í–Ü–î–õ–ò–í', '–ú–û–°–ö–Ü–¢–ö–ê', '–û–°–¢–ï–ö–õ–ï–ù–ù–Ø', '–ñ–ê–õ–Æ–ó–Ü']
    if order.isdigit() and 1 <= int(order) <= 1000:
        data_base = await state.get_data()
        table = data_base.get('select_table')
        if table in tables:
            await process_order(table)
        else:
            await bot.send_message(message.from_user.id, f'‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è ‚ùå')
    else:
        await bot.send_message(message.from_user.id, '‚ùå –ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –¥–∞–Ω—ñ! ‚ùå')


async def select_order_tables(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    await bot.send_message(message.from_user.id, f'–©–æ –í–∏ –∑–∞–º–æ–≤–ª—è–ª–∏? ‚¨áÔ∏è', reply_markup=tables_kb())
    await state.set_state(CreateState.order_table)


async def user_orders(call: CallbackQuery, state: FSMContext):
    await state.update_data(order_table=call.data)
    user_id = call.from_user.id
    data_base = await state.get_data()
    table = data_base.get('order_table')
    if table == '–ü–Ü–î–í–Ü–ö–û–ù–ù–Ø':
        with sqlite3.connect('orders_db.db') as con:
            cursor = con.cursor()
            cursor.execute('SELECT id, telegram_id FROM –ü–Ü–î–í–Ü–ö–û–ù–ù–Ø WHERE telegram_id = ?', (user_id,))
            orders = cursor.fetchall()
            con.commit()
        first_elements = [tpl[0] for tpl in orders]
        user_list = ', '.join(map(str, first_elements[-10:]))
        await call.message.answer(f'–ù–æ–º–µ—Ä–∏ –í–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å: {user_list}')
    elif table == '–í–Ü–î–õ–ò–í':
        with sqlite3.connect('orders_db.db') as con:
            cursor = con.cursor()
            cursor.execute('SELECT id, telegram_id FROM –í–Ü–î–õ–ò–í WHERE telegram_id = ?', (user_id,))
            orders = cursor.fetchall()
            con.commit()
        first_elements = [tpl[0] for tpl in orders]
        user_list = ', '.join(map(str, first_elements[-10:]))
        await call.message.answer(f'–ù–æ–º–µ—Ä–∏ –í–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å: {user_list}', reply_markup=profile_kb())
    elif table == '–ú–û–°–ö–Ü–¢–ö–ê':
        with sqlite3.connect('orders_db.db') as con:
            cursor = con.cursor()
            cursor.execute('SELECT id, telegram_id FROM –ú–û–°–ö–Ü–¢–ö–ê WHERE telegram_id = ?', (user_id,))
            orders = cursor.fetchall()
            con.commit()
        first_elements = [tpl[0] for tpl in orders]
        user_list = ', '.join(map(str, first_elements[-10:]))
        await call.message.answer(f'–ù–æ–º–µ—Ä–∏ –í–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å: {user_list}', reply_markup=profile_kb())
    elif table == '–û–°–¢–ï–ö–õ–ï–ù–ù–Ø':
        with sqlite3.connect('orders_db.db') as con:
            cursor = con.cursor()
            cursor.execute('SELECT id, telegram_id FROM –û–°–¢–ï–ö–õ–ï–ù–ù–Ø WHERE telegram_id = ?', (user_id,))
            orders = cursor.fetchall()
            con.commit()
        first_elements = [tpl[0] for tpl in orders]
        user_list = ', '.join(map(str, first_elements[-10:]))
        await call.message.answer(f'–ù–æ–º–µ—Ä–∏ –í–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å: {user_list}', reply_markup=profile_kb())
    elif table == '–ñ–ê–õ–Æ–ó–Ü':
        with sqlite3.connect('orders_db.db') as con:
            cursor = con.cursor()
            cursor.execute('SELECT id, telegram_id FROM –ñ–ê–õ–Æ–ó–Ü WHERE telegram_id = ?', (user_id,))
            orders = cursor.fetchall()
            con.commit()
        first_elements = [tpl[0] for tpl in orders]
        user_list = ', '.join(map(str, first_elements[-10:]))
        await call.message.answer(f'–ù–æ–º–µ—Ä–∏ –í–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å: {user_list}', reply_markup=profile_kb())
